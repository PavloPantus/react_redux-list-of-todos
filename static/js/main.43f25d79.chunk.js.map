{"version":3,"sources":["store.js","helpers.js","User.js","TodoItem.js","TodoList.js","api.js","App.js","index.js"],"names":["setArrayOfTodos","value","type","getTodos","state","arrayOfTodosAndUsers","getIsLoadingTodos","isLoadingArrayOfTodosAndUsers","getIsLoadedTodos","isLoadedArrayOfTodosAndUsers","getActiveSortField","activeSortField","getReverseStatus","reverseStatus","store","createStore","action","Object","objectSpread2","getDataFromServer","dataUrl","serverHeading","dataFromServer","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","json","abrupt","stop","User","_ref","user","name","connect","dispatch","setArrayOfTodosAndUsers","todo","react_default","createElement","className","title","src_User","classNames","completed","not-completed","onClick","filter","oldTodo","id","TodoList","setIsLoadingArrayOfTodosAndUsers","setIsLoadedArrayOfTodosAndUsers","setActiveSortField","setReverseStatus","visibleTodos","toConsumableArray","sort","sortfield","length","typeOfValue","b","localeCompare","getSortMethod","reverse","Fragment","disabled","_ref2","_ref3","todos","users","Promise","all","slicedToArray","map","find","userId","item","key","toLowerCase","src_TodoItem","defaultProps","storeData","App","src_TodoList","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.43f25d79.chunk.js","sourcesContent":["/* eslint-disable camelcase */\nimport { createStore } from 'redux';\n\n// action types\nconst TYPE_setTodos = ('setTodos');\nconst TYPE_setIsLoadingTodos = ('setIsLoadingTodos');\nconst TYPE_setIsLoadedTodos = ('setIsLoadedTodos');\nconst TYPE_setActiveSortField = 'setActiveSortField';\nconst TYPE_setReverseStatus = 'setReverseStatus';\n\n// action creators\nexport const setArrayOfTodos = value => ({\n  type: TYPE_setTodos, value,\n});\nexport const setIsLoadingTodos = value => ({\n  type: TYPE_setIsLoadingTodos, value,\n});\nexport const setIsLoadedTodos = value => ({\n  type: TYPE_setIsLoadedTodos, value,\n});\nexport const setActiveSortField = value => ({\n  type: TYPE_setActiveSortField, value,\n});\nexport const setReverseStatus = value => ({\n  type: TYPE_setReverseStatus, value,\n});\n\n// selectors\nexport const getTodos = state => state.arrayOfTodosAndUsers;\nexport const getIsLoadingTodos = state => (\n  state.isLoadingArrayOfTodosAndUsers\n);\nexport const getIsLoadedTodos = state => (\n  state.isLoadedArrayOfTodosAndUsers\n);\nexport const getActiveSortField = state => state.activeSortField;\nexport const getReverseStatus = state => state.reverseStatus;\n\n// reducer\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case TYPE_setTodos:\n      return {\n        ...state, arrayOfTodosAndUsers: action.value,\n      };\n\n    case TYPE_setIsLoadingTodos: return {\n      ...state,\n      isLoadingArrayOfTodosAndUsers: action.value,\n    };\n\n    case TYPE_setIsLoadedTodos: return {\n      ...state,\n      isLoadedArrayOfTodosAndUsers: action.value,\n    };\n\n    case TYPE_setActiveSortField: return {\n      ...state,\n      activeSortField: action.value,\n    };\n\n    case TYPE_setReverseStatus: return {\n      ...state,\n      reverseStatus: action.value,\n    };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, {\n  arrayOfTodosAndUsers: [],\n  isLoadingArrayOfTodosAndUsers: false,\n  isLoadedArrayOfTodosAndUsers: false,\n  activeSortField: '',\n  reverseStatus: false,\n});\n\nexport default store;\n","export const getDataFromServer = async(dataUrl) => {\n  const serverHeading = await fetch(dataUrl);\n  const dataFromServer = await serverHeading.json();\n\n  return dataFromServer;\n};\n","\nconst User = ({ user }) => (\n  user.name\n);\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { setArrayOfTodos,\n  getTodos } from './store';\n\nimport User from './User';\n\nconst TodoItem = (\n  { todo,\n    setArrayOfTodosAndUsers,\n    arrayOfTodosAndUsers }\n) => (\n  <tr className=\"list-of-todos__row\">\n    <td className=\"list-of-todos__cell\">\n      {todo.title}\n    </td>\n    <td className=\"list-of-todos__cell\">\n      <User user={todo.user} />\n    </td>\n    <td className={\n      classNames(\n        'list-of-todos__cell',\n        {\n          completed: todo.completed,\n          'not-completed': !todo.completed,\n        },\n      )\n    }\n    >\n      {todo.completed ? 'completed' : 'not completed'}\n    </td>\n    <td className=\"list-of-todos__cell\">\n      <button\n        type=\"button\"\n        onClick={() => {\n          setArrayOfTodosAndUsers(\n            arrayOfTodosAndUsers.filter(\n              oldTodo => oldTodo.id !== todo.id\n            )\n          );\n        }}\n        className=\"button button_remove\"\n      >\n          delete\n      </button>\n    </td>\n  </tr>\n);\n\nconst getData = state => ({\n  arrayOfTodosAndUsers: getTodos(state),\n});\n\nconst getMethods = dispatch => ({\n  setArrayOfTodosAndUsers: value => dispatch(\n    setArrayOfTodos(value)\n  ),\n});\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }),\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  setArrayOfTodosAndUsers: PropTypes.func.isRequired,\n  arrayOfTodosAndUsers: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n};\n\nexport default connect(getData, getMethods)(TodoItem);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as storeData from './store';\n\nimport { todosUrl, usersUrl } from './api';\nimport { getDataFromServer } from './helpers';\n\nimport TodoItem from './TodoItem';\n\nconst TodoList = (\n  {\n    arrayOfTodosAndUsers,\n    setArrayOfTodosAndUsers,\n    isLoadingArrayOfTodosAndUsers,\n    setIsLoadingArrayOfTodosAndUsers,\n    isLoadedArrayOfTodosAndUsers,\n    setIsLoadedArrayOfTodosAndUsers,\n    activeSortField,\n    setActiveSortField,\n    reverseStatus,\n    setReverseStatus,\n  }\n) => {\n  const loadArrayOfTodosAndUsers = async() => {\n    setIsLoadingArrayOfTodosAndUsers(true);\n\n    const [todos, users] = await Promise.all(\n      [getDataFromServer(todosUrl), getDataFromServer(usersUrl)]\n    );\n\n    setArrayOfTodosAndUsers(\n      todos.map(\n        todo => ({\n          ...todo, user: users.find(user => user.id === todo.userId),\n        })\n      )\n    );\n\n    setIsLoadingArrayOfTodosAndUsers(false);\n    setIsLoadedArrayOfTodosAndUsers(true);\n  };\n\n  const getSortMethod = (sortfield) => {\n    if (arrayOfTodosAndUsers.length === 0) {\n      return () => 1;\n    }\n\n    if (activeSortField === '') {\n      return () => 1;\n    }\n\n    const typeOfValue = typeof arrayOfTodosAndUsers[0][sortfield];\n\n    if (typeOfValue === 'string') {\n      return (a, b) => a[sortfield].localeCompare(b[sortfield]);\n    }\n\n    if (typeOfValue === 'boolean'\n      || typeOfValue === 'number'\n    ) {\n      return (a, b) => a[sortfield] - b[sortfield];\n    }\n\n    return () => 1;\n  };\n\n  const headers = ['Title', 'User', 'Completed', 'Remove item'];\n\n  let visibleTodos = [...arrayOfTodosAndUsers].sort(\n    getSortMethod(activeSortField)\n  );\n\n  if (reverseStatus) {\n    visibleTodos = visibleTodos.reverse();\n  }\n\n  return (\n    <>\n      {isLoadedArrayOfTodosAndUsers ? ''\n        : (\n          <button\n            type=\"button\"\n            disabled={isLoadingArrayOfTodosAndUsers}\n            onClick={loadArrayOfTodosAndUsers}\n          >\n            {isLoadingArrayOfTodosAndUsers\n              ? 'loading...' : 'download list'}\n          </button>\n        )}\n\n      {\n        isLoadedArrayOfTodosAndUsers\n          ? (\n            <table className=\"list-of-todos\">\n              <thead>\n                <tr>\n                  {headers.map(\n                    item => (\n                      <th\n                        key={item}\n                        onClick={() => {\n                          setActiveSortField(\n                            item.toLowerCase() === 'user'\n                              ? 'user.name' : item.toLowerCase()\n                          );\n\n                          setReverseStatus(\n                            (activeSortField === item.toLowerCase()\n                              || activeSortField === 'user.name')\n                              ? !reverseStatus : reverseStatus\n                          );\n                        }}\n                        className=\"list-of-todos__heading list-of-todos__cell\"\n                      >\n                        {item}\n                      </th>\n                    )\n                  )}\n                </tr>\n              </thead>\n              <tbody>\n                {visibleTodos.map(\n                  todo => <TodoItem key={todo.id} todo={todo} />\n                )}\n              </tbody>\n            </table>\n          )\n          : ''\n      }\n    </>\n  );\n};\n\nconst getData = state => ({\n  arrayOfTodosAndUsers: storeData.getTodos(state),\n  isLoadingArrayOfTodosAndUsers: storeData.getIsLoadingTodos(state),\n  isLoadedArrayOfTodosAndUsers: storeData.getIsLoadedTodos(state),\n  activeSortField: storeData.getActiveSortField(state),\n  reverseStatus: storeData.getReverseStatus(state),\n});\n\nconst getMethods = dispatch => ({\n  setArrayOfTodosAndUsers: value => dispatch(\n    storeData.setArrayOfTodos(value)\n  ),\n  setIsLoadingArrayOfTodosAndUsers: value => dispatch(\n    storeData.setIsLoadingTodos(value)\n  ),\n  setIsLoadedArrayOfTodosAndUsers: value => dispatch(\n    storeData.setIsLoadedTodos(value)\n  ),\n  setActiveSortField: value => dispatch(\n    storeData.setActiveSortField(value)\n  ),\n  setReverseStatus: value => dispatch(\n    storeData.setReverseStatus(value)\n  ),\n});\n\nTodoList.propTypes = {\n  arrayOfTodosAndUsers: PropTypes.arrayOf(PropTypes.object),\n  setArrayOfTodosAndUsers: PropTypes.func.isRequired,\n  isLoadingArrayOfTodosAndUsers: PropTypes.bool.isRequired,\n  setIsLoadingArrayOfTodosAndUsers: PropTypes.func.isRequired,\n  isLoadedArrayOfTodosAndUsers: PropTypes.bool.isRequired,\n  setIsLoadedArrayOfTodosAndUsers: PropTypes.func.isRequired,\n  activeSortField: PropTypes.string.isRequired,\n  setActiveSortField: PropTypes.func.isRequired,\n  reverseStatus: PropTypes.bool.isRequired,\n  setReverseStatus: PropTypes.func.isRequired,\n\n};\n\nTodoList.defaultProps = {\n  arrayOfTodosAndUsers: [],\n};\n\nexport default connect(getData, getMethods)(TodoList);\n","export const todosUrl = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n","import React from 'react';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Todo list app</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}